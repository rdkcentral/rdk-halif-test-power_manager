/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPLAT_POWER_H
#define _MOCKPLAT_POWER_H

#include "unity.h"
#include "plat_power.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockplat_power_Init(void);
void Mockplat_power_Destroy(void);
void Mockplat_power_Verify(void);




#define PLAT_INIT_ExpectAndReturn(cmock_retval) PLAT_INIT_CMockExpectAndReturn(__LINE__, cmock_retval)
void PLAT_INIT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, pmError_t cmock_to_return);
#define PLAT_API_SetPowerState_ExpectAndReturn(newState, cmock_retval) PLAT_API_SetPowerState_CMockExpectAndReturn(__LINE__, newState, cmock_retval)
void PLAT_API_SetPowerState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, IARM_Bus_PWRMgr_PowerState_t newState, pmError_t cmock_to_return);
#define PLAT_API_GetPowerState_ExpectAndReturn(curState, cmock_retval) PLAT_API_GetPowerState_CMockExpectAndReturn(__LINE__, curState, cmock_retval)
void PLAT_API_GetPowerState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, IARM_Bus_PWRMgr_PowerState_t* curState, pmError_t cmock_to_return);
#define PLAT_API_GetTemperature_ExpectAndReturn(curState, curTemperature, wifiTemperature, cmock_retval) PLAT_API_GetTemperature_CMockExpectAndReturn(__LINE__, curState, curTemperature, wifiTemperature, cmock_retval)
void PLAT_API_GetTemperature_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, IARM_Bus_PWRMgr_ThermalState_t* curState, float* curTemperature, float* wifiTemperature, pmError_t cmock_to_return);
#define PLAT_API_SetTempThresholds_ExpectAndReturn(tempHigh, tempCritical, cmock_retval) PLAT_API_SetTempThresholds_CMockExpectAndReturn(__LINE__, tempHigh, tempCritical, cmock_retval)
void PLAT_API_SetTempThresholds_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float tempHigh, float tempCritical, pmError_t cmock_to_return);
#define PLAT_API_GetTempThresholds_ExpectAndReturn(tempHigh, tempCritical, cmock_retval) PLAT_API_GetTempThresholds_CMockExpectAndReturn(__LINE__, tempHigh, tempCritical, cmock_retval)
void PLAT_API_GetTempThresholds_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float* tempHigh, float* tempCritical, pmError_t cmock_to_return);
#define PLAT_API_DetemineClockSpeeds_ExpectAndReturn(cpu_rate_Normal, cpu_rate_Scaled, cpu_rate_Minimal, cmock_retval) PLAT_API_DetemineClockSpeeds_CMockExpectAndReturn(__LINE__, cpu_rate_Normal, cpu_rate_Scaled, cpu_rate_Minimal, cmock_retval)
void PLAT_API_DetemineClockSpeeds_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* cpu_rate_Normal, uint32_t* cpu_rate_Scaled, uint32_t* cpu_rate_Minimal, pmError_t cmock_to_return);
#define PLAT_API_SetClockSpeed_ExpectAndReturn(speed, cmock_retval) PLAT_API_SetClockSpeed_CMockExpectAndReturn(__LINE__, speed, cmock_retval)
void PLAT_API_SetClockSpeed_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t speed, pmError_t cmock_to_return);
#define PLAT_API_GetClockSpeed_ExpectAndReturn(speed, cmock_retval) PLAT_API_GetClockSpeed_CMockExpectAndReturn(__LINE__, speed, cmock_retval)
void PLAT_API_GetClockSpeed_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* speed, pmError_t cmock_to_return);
#define PLAT_TERM_Expect() PLAT_TERM_CMockExpect(__LINE__)
void PLAT_TERM_CMockExpect(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
